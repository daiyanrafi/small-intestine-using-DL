# -*- coding: utf-8 -*-
"""Small_intestine 01.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1X31_PhXLrMwZDQPEZh1fcd-QeGphJNDC
"""

# Commented out IPython magic to ensure Python compatibility.
# %cd ..
from google.colab import drive
drive.mount('/content/gdrive')

!ln -s /content/gdrive/My\ Drive/ /mydrive

import os
os.makedirs("/content/dataset")

import tensorflow as tf
tf.test.gpu_device_name()

!nvidia-smi

! sudo cp -v -r "/content/gdrive/MyDrive/cse498r/AICE_project_2.zip" "/content/dataset"

! unzip /content/dataset/AICE_project_2.zip  -d /content/dataset/

# Commented out IPython magic to ensure Python compatibility.
import torch
import os
from random import choice
import shutil
from torchvision.transforms import ToTensor
from torchvision import datasets, transforms, models
from torch.utils.data import Dataset

from matplotlib import pyplot as plt
import numpy as np
import pandas as pd
import cv2
# %matplotlib inline

from PIL import Image
from torchvision.datasets import ImageFolder
# %matplotlib inline

! sudo cp -v -r "/content/gdrive/MyDrive/cse498r/yolov5-master" "/content/dataset"

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/dataset/yolov5-master

ls /content/dataset/yolov5-master

!pip install -r requirements.txt

PATH = '/content/dataset/'
IMG_PATH = '/content/dataset/AICE_project_all_images/AICE_project_all_images/'
TXT_PATH = '/content/dataset/AICE_project_all_txt/AICE_project_all_txt/'

img = cv2.imread("/content/dataset/AICE_project_all_images/AICE_project_all_images/image00165.jpg")
# changing to the BGR format of OpenCV to RGB format for matplotlib
plt.imshow(img[:,:,::-1])

df = pd.read_csv(PATH + "all_annotation.csv")
df.head()

def classCount(labelPath):
  c0 = 0
  c1 = 0
  c2 = 0
  c3 = 0
  c4 = 0
  c5 = 0
  c6 = 0 
  c7 = 0
  c8 = 0
  c9 = 0
  c10 = 0 
  c11 = 0
  c12 = 0

  for root, dirs, files in os.walk(labelPath):
    for file in files:
      if file.endswith('.txt'):
        lines = [line.rstrip('\n') for line in open(labelPath+file)]
        if lines != ['']:
          for line in lines:
            components = line.split(" ")
            category = components[0]
            if category == '0':
              c1 += 1
            elif category == '1':
              c2 += 1
            elif category == '2':
              c3 += 1
            elif category == '3':
              c4 += 1
            elif category == '4':
              c5 += 1
            elif category == '5':
              c6 += 1
            elif category == '6':
              c7 += 1
            elif category == '7':
              c8 += 1
            elif category == '8':
              c9 += 1
            elif category == '9':
              c10 += 1
            elif category == '10':
              c11 += 1
            elif category == '11':
              c12 += 1
            else:
              c0 += 1
          
                 
          
                
  print('FN:', c0)              
  print('Angiodysplasia:', c1)
  print('Erosion:', c2)
  print('Stenosis:', c3)
  print('Lymphangiectasia:', c4)
  print('Lymph follicle:', c5)
  print('SMT:', c6)
  print('Polyp-like:', c7)
  print('Bleeding:', c8)
  print('Diverticulum:', c9)
  print('Erythema:', c10)
  print('Foreign body:', c11)
  print('Vein:', c12)

classCount(TXT_PATH)

totalImgCount = len(os.listdir(IMG_PATH))
totalImgCount

PROBLEM = "detection"
ANNOTATION_MODE = "yolo"
GENERATION_MODE = "linear"
OUTPUT_MODE = "yolo"
OUTPUT_PATH= "augmented_images_yolo5"
INPUT_PATH = "mydrive/CSE-465/yolov5/micrography/camera_micrography"

def boxesFromYOLO(IMG_PATH,TXT_PATH):
    image = cv2.imread(IMG_PATH)
    (hI, wI) = image.shape[:2]
    lines = [line.rstrip('\n') for line in open(TXT_PATH)]
    #if(len(objects)<1):
    #    raise Exception("The xml should contain at least one object")
    boxes = []
    if lines != ['']:
        for line in lines:
            components = line.split(" ")
            category = components[0]
            x  = int(float(components[1])*wI - float(components[3])*wI/2)
            y = int(float(components[2])*hI - float(components[4])*hI/2)
            h = int(float(components[4])*hI)
            w = int(float(components[3])*wI)
            boxes.append((category, (x, y, w, h)))
    return (image,boxes)

categoriesColors = {11: (255,0,0),14:(0,0,255)}

def showBoxes(image,boxes):
    cloneImg = image.copy()
    for box in boxes:
        if(len(box)==2):
            (category, (x, y, w, h))=box
        else:
            (category, (x, y, w, h),_)=box
        if int(category) in categoriesColors.keys():
            cv2.rectangle(cloneImg,(x,y),(x+w,y+h),categoriesColors[int(category)],5)
        else:
            cv2.rectangle(cloneImg,(x,y),(x+w,y+h),(0,255,0),5)
    plt.imshow(cloneImg[:,:,::-1])

img,boxes = boxesFromYOLO("/content/dataset/AICE_project_all_images/AICE_project_all_images/image11450.jpg","/content/dataset/AICE_project_all_txt/AICE_project_all_txt/image11450.txt")
showBoxes(img,boxes)

imgs =[]
xmls =[]

labelPath = "/content/dataset/AICE_project_all_txt/AICE_project_all_txt"
imagePath = "/content/dataset/AICE_project_all_images/AICE_project_all_images"

train_ratio = 0.8
val_ratio = 0.2
#total count of imgs
totalImgCount = int(len(os.listdir(labelPath)))

for (dirname, dirs, files) in os.walk(imagePath):
  for filename in files:
    imgs.append(filename)
            
for (dirname, dirs, files) in os.walk(labelPath):
  for filename in files:
    xmls.append(filename)

#counting range for cycles
countForTrain = int(len(imgs)*train_ratio)
countForVal = int(len(imgs)*val_ratio)
print("training images are : ",countForTrain)
print("Validation images are : ",countForVal)

len(imgs)

os.makedirs("/content/dataset/yolov5/Dataset/images/train")
os.makedirs("/content/dataset/yolov5/Dataset/labels/train")
os.makedirs("/content/dataset/yolov5/Dataset/images/valid")
os.makedirs("/content/dataset/yolov5/Dataset/labels/valid")

trainimagePath = '/content/dataset/yolov5/Dataset/images/train'
trainlabelPath = '/content/dataset/yolov5/Dataset/labels/train'
length = len(imgs)
#cycle for train dir
for x in range(countForTrain):

    fileJpg = choice(imgs) # get name of random image from origin dir
    fileTxt = fileJpg[:-4] +'.txt' # get name of corresponding annotation file

    #move both files into train dir
    shutil.move(os.path.join(imagePath, fileJpg), os.path.join(trainimagePath, fileJpg))
    shutil.move(os.path.join(labelPath, fileTxt), os.path.join(trainlabelPath, fileTxt))


    #remove files from arrays
    imgs.remove(fileJpg)
    xmls.remove(fileTxt)

valimagePath = '/content/dataset/yolov5/Dataset/images/valid'
vallabelPath = '/content/dataset/yolov5/Dataset/labels/valid'

#cycle for test dir   
for x in range(countForVal):

    fileJpg = choice(imgs) # get name of random image from origin dir
    fileTxt = fileJpg[:-4] +'.txt' # get name of corresponding annotation file

    #move both files into train dir
    shutil.move(os.path.join(imagePath, fileJpg), os.path.join(valimagePath, fileJpg))
    shutil.move(os.path.join(labelPath, fileTxt), os.path.join(vallabelPath, fileTxt))

    #remove files from arrays
    imgs.remove(fileJpg)
    xmls.remove(fileTxt)

#rest of files will be validation files, so rename origin dir to val dir
#os.rename(crsPath, valPath)

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/dataset/yolov5-master

!pip install wandb

!wandb login

! python train.py --img 640 --batch 20 --epochs 30 --data smallIntestine.yaml --weights yolov5s.pt

for root, dirs, files in os.walk(labelPath):
    for file in files:
      if file.endswith('.txt'):
        lines = [line.rstrip('\n') for line in open(labelPath+file)]
        if lines != ['']:
          for line in lines:
            components = line.split(" ")
            category = components[0]
            if category == '0':
              xmls.append(file)
            elif category == '1':
             
            elif category == '2':
              
            elif category == '3':
             
            elif category == '4':
              
            elif category == '5':
              
            elif category == '6':
              
            elif category == '7':
             
            elif category == '8':
             
            elif category == '9':
             
            elif category == '10':
              
            elif category == '11':

            else:

for file in xmls:
  lines = [line.rstrip('\n') for line in open(file)]
  if lines != ['']:
    for line in lines:
      components = line.split(" ")
      category = components[0]